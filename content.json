[{"title":"SpringBoot-logback","date":"2020-03-26T13:12:33.950Z","path":"2020/03/26/SpringBoot-logback/","text":"spring-logback参考1参考2 1.依赖实际开发中我们不需要直接添加该依赖，你会发现spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。 2.参数配置123456789101112131415logging.file=指定日志文件的位置(只支持默认的Logback设置。)logging.path=指定日志文件存放的目录，自动在该目录下创建spring.log日志文件(只支持默认的Logback设置。)##那些包使用怎样的日志级别 logging.level.包名，指定某个包下日志的级别,会覆盖logback配置文件中设置的日志级别logging.level.root=warnlogging.level.com.springboot.controllers=infologging.config=指定logback的配置文件的位置，默认在resources目录下的logback-spring.xmllogging.exception-conversion-word=当日志出现异常时会用到这个转换词。logging.file.max-history= 日志保存时间(只支持默认的Logback设置。)logging.file.max-size= 日志文件最大尺寸(只支持默认的Logback设置。)logging.pattern.console=用在控制台中的日志模式(stdout)。(只支持默认的Logback设置。)logging.pattern.dateformat=日志中日期模式(只支持默认的Logback设置。)logging.pattern.file=用在文件中的日志模式 (如果启用LOG_FILE)。(只支持默认的Logback设置。)logging.pattern.level=这种模式用来实施日志级别(默认%5p)。 (只支持默认的Logback设置。)logging.register-shutdown-hook= 2.分析","slug":"SpringBoot-logback","updated":"2020-03-26T13:12:33.950Z","comments":true,"categories":[],"tags":[]},{"title":"java-thread","date":"2020-03-21T09:54:39.445Z","path":"2020/03/21/java-thread/","text":"java 线程","slug":"java-thread","updated":"2020-03-21T09:54:39.445Z","comments":true,"categories":[],"tags":[]},{"title":"分析内存快照","date":"2020-03-21T09:37:41.854Z","path":"2020/03/21/分析内存快照/","text":"Eclipse Memory Analyzer 安装Eclipse Memory Analyzer 1.安装下载地址修改初始化参数 MemoryAnalyzer.ini12345678-startup../Eclipse/plugins/org.eclipse.equinox.launcher_1.5.0.v20180512-1130.jar--launcher.library../Eclipse/plugins/org.eclipse.equinox.launcher.cocoa.macosx.x86_64_1.1.700.v20180518-1200-vmargs-Xmx4024m -Dorg.eclipse.swt.internal.carbon.smallFonts-XstartOnFirstThread 2.分析","slug":"分析内存快照","updated":"2020-03-21T09:37:41.854Z","comments":true,"categories":[],"tags":[]},{"title":"内存快照获取与分析","date":"2020-03-08T05:53:04.275Z","path":"2020/03/08/获取内存快照/","text":"获取DUMP快照 参考 启动参数配置OOM时触发打印堆快照1.tomcat启动方式添加参数123(添加环境变量) export JAVA_OPTS= -XX:+HeapDumpOnOutOfMemoryError (表明进行统计相关heapDump文件再OOM的时候)-XX:HeapDumpPath=/export/Domains/rcsv-fm.wd.local/server1/logs/gc.hprof（表明会导出生产的HeapDump文件的路径） 2.jvm 命令参数123456 (添加环境变量) Java -jar -XX:+HeapDumpOnOutOfMemoryError (表明进行统计相关heapDump文件再OOM的时候) -XX:HeapDumpPath=/export/Domains/rcsv-fm.wd.local/server1/logs/gc.hprof（表明会导出生产的HeapDump文件的路径） （1）-XX:+HeapDumpOnOutOfMemoryError参数表示当JVM发生OOM时，自动生成DUMP文件。（2）-XX:HeapDumpPath=$&#123;目录&#125;参数表示生成DUMP文件的路径，也可以指定文件名称，例如：-XX:HeapDumpPath=$&#123;目录&#125;/java_heapdump.hprof。如果不指定文件名，默认为：java_&lt;pid&gt;_&lt;date&gt;_&lt;time&gt;_heapDump.hprof。 启动参数配置OOM时触发打印堆快照 启动参数配置OOM时触发打印堆快照jmap -dump:format=b,file=xxx.hprof pid jmap -dump:format=b,file=/path/heap.bin 进程ID 如果只dump heap中的存活对象，则加上选项-live。 kill -3 or -9 都不会打堆快照，kill jvm来不及做任何事情就被干掉了，-3会打印thread dump 但是不是heap dump。 ps -ef|grep tomcat #获取tomcat的pid/jps -lv -XX:+PrintGCDetails -Xloggc:/opt/logs/gc.log -verbose:gc jmap -histo:live pid&gt;a.log","slug":"获取内存快照","updated":"2020-03-08T05:53:04.276Z","comments":true,"categories":[],"tags":[]},{"title":"Hello World","date":"2019-11-02T11:23:28.823Z","path":"2019/11/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","slug":"hello-world","updated":"2019-11-02T11:23:28.823Z","comments":true,"categories":[],"tags":[]}]